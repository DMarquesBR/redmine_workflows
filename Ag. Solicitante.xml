# Custom Workflow
# Before Save

begin
  # Número do status "Aguardando Solicitante"
  ag_solicitante = 7

  # Número do status "Retornar para a Fábrica"
  retornar_fabrica = 17

  # Obtém os status antigo e atual
  old_status = @issue.status_id_was.to_i
  current_status = @issue.status_id.to_i

  # Verifica se o status da demanda foi alterado de "Aguardando Solicitante"
  # para "Retornar para Fábrica"
  if old_status == ag_solicitante && current_status == retornar_fabrica
    # Obtenha o histórico de status da issue
    previous_statuses = @issue.journals.map do |journal|
      journal.details.find { |detail| detail.prop_key == 'status_id' }
    end.compact.map(&:old_value).map(&:to_i)

    # Obtenha o valor do status anterior ao "Aguardando Solicitante"
    s_minus_1 = previous_statuses[-1]

    # Alterar o status para s-1, se existir
    if s_minus_1
      @issue.status_id = s_minus_1
      logger.info "[FLUXO AG. SOLICITANTE] Status alterado automaticamente para o anterior imediato (s-1): #{s_minus_1}"
    else
      logger.warn "[FLUXO AG. SOLICITANTE] Não foi possível alterar o status: status anterior (s-1) não encontrado"
    end
  else
    logger.info "[FLUXO AG. SOLICITANTE] Condições não atendidas: @old_status = #{old_status}, status atual = #{current_status}"
  end
rescue => e
  logger.error "[FLUXO AG. SOLICITANTE] Erro ao processar o script de status: #{e.message}"
end
