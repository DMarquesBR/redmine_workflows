<?xml version="1.0" encoding="UTF-8"?>
<hash>
  <id type="integer">13</id>
  <before-save>@old_status = @issue.status_id_was</before-save>
  <created-at type="dateTime">2025-01-16T14:05:21Z</created-at>
  <updated-at type="dateTime">2025-01-16T14:29:32Z</updated-at>
  <name>timer_v2</name>
  <description></description>
  <string></string>
  <position type="integer">7</position>
  <integer type="integer">1</integer>
  <after-save>if @issue &amp;&amp; @issue.id
    # Status definitions
    running_statuses = [2, 4]
    planning_statuses = [2]
    execution_statuses = [4]
    stopped_statuses = [1, 3, 5, 6]
  
    #old_status = @issue.status_id_was
    old_status = @old_status
    new_status = @issue.status_id
    
    Rails.logger.info("****** OLD ##{old_status} *** NEW ##{new_status}")


    # Transition from "stopped" to "running"
    if stopped_statuses.include?(old_status) &amp;&amp; running_statuses.include?(new_status)
        Rails.logger.info("******** DE PARADO PARA ANDANDO *********")

      timer_description = if planning_statuses.include?(new_status)
                            'inicio'
                          elsif execution_statuses.include?(new_status)
                            'solucao'
                          else
                            'type not found'
                          end
  
      existing_timer = IssueTimer.where(issue_id: @issue.id, timer_stop: nil).first
      if existing_timer.nil?
        timer = IssueTimer.new(
          issue_id: @issue.id,
          timer_start: Time.now.utc,
          timer_type: timer_description
        )
  
        if timer.save
          Rails.logger.info("Timer created successfully for issue ##{@issue.id}")
        else
          Rails.logger.error("Failed to create timer for issue ##{@issue.id}: #{timer.errors.full_messages.join(', ')}")
          raise WorkflowError, 'Failed to create timer entry'
        end
      end
    end
  
    # Transition from "running" to "stopped"
    if running_statuses.include?(old_status) &amp;&amp; stopped_statuses.include?(new_status)
        Rails.logger.info("******** DE ANDANDO PARA PARADO *********")

      existing_timer = IssueTimer.where(issue_id: @issue.id, timer_stop: nil).first
      if existing_timer.present?
        if existing_timer.update(timer_stop: Time.now.utc)
          Rails.logger.info("Timer stopped successfully for issue ##{@issue.id}")
        else
          Rails.logger.error("Failed to stop timer for issue ##{@issue.id}: #{existing_timer.errors.full_messages.join(', ')}")
          raise WorkflowError, 'Failed to stop timer'
        end
      end
    end
  end
  </after-save>
  <is-for-all type="boolean">true</is-for-all>
  <author></author>
  <active type="boolean">true</active>
  <observable>issue</observable>
  <shared-code nil="true"/>
  <before-add nil="true"/>
  <after-add nil="true"/>
  <before-remove nil="true"/>
  <after-remove nil="true"/>
  <before-destroy></before-destroy>
  <after-destroy></after-destroy>
  <exported-at>2025-01-16T14:29:34Z</exported-at>
  <plugin-version>3.0.0</plugin-version>
  <ruby-version>3.2.6-p234</ruby-version>
  <rails-version>7.2.2</rails-version>
</hash>
